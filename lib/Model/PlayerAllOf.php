<?php
/**
 * PlayerAllOf
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlayerAllOf Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PlayerAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'player_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'player_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'shape_margin' => 'int',
        'shape_radius' => 'int',
        'shape_aspect' => 'string',
        'shape_background_top' => 'string',
        'shape_background_bottom' => 'string',
        'link_active' => 'string',
        'assets' => '\OpenAPI\Client\Model\PlayerAllOfAssets'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'player_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'shape_margin' => null,
        'shape_radius' => null,
        'shape_aspect' => null,
        'shape_background_top' => null,
        'shape_background_bottom' => null,
        'link_active' => null,
        'assets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_id' => 'playerId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'shape_margin' => 'shapeMargin',
        'shape_radius' => 'shapeRadius',
        'shape_aspect' => 'shapeAspect',
        'shape_background_top' => 'shapeBackgroundTop',
        'shape_background_bottom' => 'shapeBackgroundBottom',
        'link_active' => 'linkActive',
        'assets' => 'assets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_id' => 'setPlayerId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'shape_margin' => 'setShapeMargin',
        'shape_radius' => 'setShapeRadius',
        'shape_aspect' => 'setShapeAspect',
        'shape_background_top' => 'setShapeBackgroundTop',
        'shape_background_bottom' => 'setShapeBackgroundBottom',
        'link_active' => 'setLinkActive',
        'assets' => 'setAssets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_id' => 'getPlayerId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'shape_margin' => 'getShapeMargin',
        'shape_radius' => 'getShapeRadius',
        'shape_aspect' => 'getShapeAspect',
        'shape_background_top' => 'getShapeBackgroundTop',
        'shape_background_bottom' => 'getShapeBackgroundBottom',
        'link_active' => 'getLinkActive',
        'assets' => 'getAssets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_id'] = $data['player_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['shape_margin'] = $data['shape_margin'] ?? null;
        $this->container['shape_radius'] = $data['shape_radius'] ?? null;
        $this->container['shape_aspect'] = $data['shape_aspect'] ?? null;
        $this->container['shape_background_top'] = $data['shape_background_top'] ?? null;
        $this->container['shape_background_bottom'] = $data['shape_background_bottom'] ?? null;
        $this->container['link_active'] = $data['link_active'] ?? null;
        $this->container['assets'] = $data['assets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets player_id
     *
     * @return string|null
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param string|null $player_id player_id
     *
     * @return self
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at When the player was created, presented in ISO-8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at When the player was last updated, presented in ISO-8601 format.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets shape_margin
     *
     * @return int|null
     */
    public function getShapeMargin()
    {
        return $this->container['shape_margin'];
    }

    /**
     * Sets shape_margin
     *
     * @param int|null $shape_margin Deprecated
     *
     * @return self
     */
    public function setShapeMargin($shape_margin)
    {
        $this->container['shape_margin'] = $shape_margin;

        return $this;
    }

    /**
     * Gets shape_radius
     *
     * @return int|null
     */
    public function getShapeRadius()
    {
        return $this->container['shape_radius'];
    }

    /**
     * Sets shape_radius
     *
     * @param int|null $shape_radius Deprecated
     *
     * @return self
     */
    public function setShapeRadius($shape_radius)
    {
        $this->container['shape_radius'] = $shape_radius;

        return $this;
    }

    /**
     * Gets shape_aspect
     *
     * @return string|null
     */
    public function getShapeAspect()
    {
        return $this->container['shape_aspect'];
    }

    /**
     * Sets shape_aspect
     *
     * @param string|null $shape_aspect Deprecated
     *
     * @return self
     */
    public function setShapeAspect($shape_aspect)
    {
        $this->container['shape_aspect'] = $shape_aspect;

        return $this;
    }

    /**
     * Gets shape_background_top
     *
     * @return string|null
     */
    public function getShapeBackgroundTop()
    {
        return $this->container['shape_background_top'];
    }

    /**
     * Sets shape_background_top
     *
     * @param string|null $shape_background_top Deprecated
     *
     * @return self
     */
    public function setShapeBackgroundTop($shape_background_top)
    {
        $this->container['shape_background_top'] = $shape_background_top;

        return $this;
    }

    /**
     * Gets shape_background_bottom
     *
     * @return string|null
     */
    public function getShapeBackgroundBottom()
    {
        return $this->container['shape_background_bottom'];
    }

    /**
     * Sets shape_background_bottom
     *
     * @param string|null $shape_background_bottom Deprecated
     *
     * @return self
     */
    public function setShapeBackgroundBottom($shape_background_bottom)
    {
        $this->container['shape_background_bottom'] = $shape_background_bottom;

        return $this;
    }

    /**
     * Gets link_active
     *
     * @return string|null
     */
    public function getLinkActive()
    {
        return $this->container['link_active'];
    }

    /**
     * Sets link_active
     *
     * @param string|null $link_active Deprecated
     *
     * @return self
     */
    public function setLinkActive($link_active)
    {
        $this->container['link_active'] = $link_active;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \OpenAPI\Client\Model\PlayerAllOfAssets|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \OpenAPI\Client\Model\PlayerAllOfAssets|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


