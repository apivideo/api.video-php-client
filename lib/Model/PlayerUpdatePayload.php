<?php
/**
 * PlayerUpdatePayload
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlayerUpdatePayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PlayerUpdatePayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'playerUpdatePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'link' => 'string',
        'link_hover' => 'string',
        'track_played' => 'string',
        'track_unplayed' => 'string',
        'track_background' => 'string',
        'background_top' => 'string',
        'background_bottom' => 'string',
        'background_text' => 'string',
        'enable_api' => 'bool',
        'enable_controls' => 'bool',
        'force_autoplay' => 'bool',
        'hide_title' => 'bool',
        'force_loop' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text' => null,
        'link' => null,
        'link_hover' => null,
        'track_played' => null,
        'track_unplayed' => null,
        'track_background' => null,
        'background_top' => null,
        'background_bottom' => null,
        'background_text' => null,
        'enable_api' => null,
        'enable_controls' => null,
        'force_autoplay' => null,
        'hide_title' => null,
        'force_loop' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'link' => 'link',
        'link_hover' => 'linkHover',
        'track_played' => 'trackPlayed',
        'track_unplayed' => 'trackUnplayed',
        'track_background' => 'trackBackground',
        'background_top' => 'backgroundTop',
        'background_bottom' => 'backgroundBottom',
        'background_text' => 'backgroundText',
        'enable_api' => 'enableApi',
        'enable_controls' => 'enableControls',
        'force_autoplay' => 'forceAutoplay',
        'hide_title' => 'hideTitle',
        'force_loop' => 'forceLoop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'link' => 'setLink',
        'link_hover' => 'setLinkHover',
        'track_played' => 'setTrackPlayed',
        'track_unplayed' => 'setTrackUnplayed',
        'track_background' => 'setTrackBackground',
        'background_top' => 'setBackgroundTop',
        'background_bottom' => 'setBackgroundBottom',
        'background_text' => 'setBackgroundText',
        'enable_api' => 'setEnableApi',
        'enable_controls' => 'setEnableControls',
        'force_autoplay' => 'setForceAutoplay',
        'hide_title' => 'setHideTitle',
        'force_loop' => 'setForceLoop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'link' => 'getLink',
        'link_hover' => 'getLinkHover',
        'track_played' => 'getTrackPlayed',
        'track_unplayed' => 'getTrackUnplayed',
        'track_background' => 'getTrackBackground',
        'background_top' => 'getBackgroundTop',
        'background_bottom' => 'getBackgroundBottom',
        'background_text' => 'getBackgroundText',
        'enable_api' => 'getEnableApi',
        'enable_controls' => 'getEnableControls',
        'force_autoplay' => 'getForceAutoplay',
        'hide_title' => 'getHideTitle',
        'force_loop' => 'getForceLoop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = $data['text'] ?? null;
        $this->container['link'] = $data['link'] ?? null;
        $this->container['link_hover'] = $data['link_hover'] ?? null;
        $this->container['track_played'] = $data['track_played'] ?? null;
        $this->container['track_unplayed'] = $data['track_unplayed'] ?? null;
        $this->container['track_background'] = $data['track_background'] ?? null;
        $this->container['background_top'] = $data['background_top'] ?? null;
        $this->container['background_bottom'] = $data['background_bottom'] ?? null;
        $this->container['background_text'] = $data['background_text'] ?? null;
        $this->container['enable_api'] = $data['enable_api'] ?? true;
        $this->container['enable_controls'] = $data['enable_controls'] ?? true;
        $this->container['force_autoplay'] = $data['force_autoplay'] ?? false;
        $this->container['hide_title'] = $data['hide_title'] ?? false;
        $this->container['force_loop'] = $data['force_loop'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text RGBA color for timer text. Default: rgba(255, 255, 255, 1)
     *
     * @return self
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link RGBA color for all controls. Default: rgba(255, 255, 255, 1)
     *
     * @return self
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets link_hover
     *
     * @return string|null
     */
    public function getLinkHover()
    {
        return $this->container['link_hover'];
    }

    /**
     * Sets link_hover
     *
     * @param string|null $link_hover RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)
     *
     * @return self
     */
    public function setLinkHover($link_hover)
    {
        $this->container['link_hover'] = $link_hover;

        return $this;
    }

    /**
     * Gets track_played
     *
     * @return string|null
     */
    public function getTrackPlayed()
    {
        return $this->container['track_played'];
    }

    /**
     * Sets track_played
     *
     * @param string|null $track_played RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)
     *
     * @return self
     */
    public function setTrackPlayed($track_played)
    {
        $this->container['track_played'] = $track_played;

        return $this;
    }

    /**
     * Gets track_unplayed
     *
     * @return string|null
     */
    public function getTrackUnplayed()
    {
        return $this->container['track_unplayed'];
    }

    /**
     * Sets track_unplayed
     *
     * @param string|null $track_unplayed RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)
     *
     * @return self
     */
    public function setTrackUnplayed($track_unplayed)
    {
        $this->container['track_unplayed'] = $track_unplayed;

        return $this;
    }

    /**
     * Gets track_background
     *
     * @return string|null
     */
    public function getTrackBackground()
    {
        return $this->container['track_background'];
    }

    /**
     * Sets track_background
     *
     * @param string|null $track_background RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)
     *
     * @return self
     */
    public function setTrackBackground($track_background)
    {
        $this->container['track_background'] = $track_background;

        return $this;
    }

    /**
     * Gets background_top
     *
     * @return string|null
     */
    public function getBackgroundTop()
    {
        return $this->container['background_top'];
    }

    /**
     * Sets background_top
     *
     * @param string|null $background_top RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)
     *
     * @return self
     */
    public function setBackgroundTop($background_top)
    {
        $this->container['background_top'] = $background_top;

        return $this;
    }

    /**
     * Gets background_bottom
     *
     * @return string|null
     */
    public function getBackgroundBottom()
    {
        return $this->container['background_bottom'];
    }

    /**
     * Sets background_bottom
     *
     * @param string|null $background_bottom RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)
     *
     * @return self
     */
    public function setBackgroundBottom($background_bottom)
    {
        $this->container['background_bottom'] = $background_bottom;

        return $this;
    }

    /**
     * Gets background_text
     *
     * @return string|null
     */
    public function getBackgroundText()
    {
        return $this->container['background_text'];
    }

    /**
     * Sets background_text
     *
     * @param string|null $background_text RGBA color for title text. Default: rgba(255, 255, 255, 1)
     *
     * @return self
     */
    public function setBackgroundText($background_text)
    {
        $this->container['background_text'] = $background_text;

        return $this;
    }

    /**
     * Gets enable_api
     *
     * @return bool|null
     */
    public function getEnableApi()
    {
        return $this->container['enable_api'];
    }

    /**
     * Sets enable_api
     *
     * @param bool|null $enable_api enable/disable player SDK access. Default: true
     *
     * @return self
     */
    public function setEnableApi($enable_api)
    {
        $this->container['enable_api'] = $enable_api;

        return $this;
    }

    /**
     * Gets enable_controls
     *
     * @return bool|null
     */
    public function getEnableControls()
    {
        return $this->container['enable_controls'];
    }

    /**
     * Sets enable_controls
     *
     * @param bool|null $enable_controls enable/disable player controls. Default: true
     *
     * @return self
     */
    public function setEnableControls($enable_controls)
    {
        $this->container['enable_controls'] = $enable_controls;

        return $this;
    }

    /**
     * Gets force_autoplay
     *
     * @return bool|null
     */
    public function getForceAutoplay()
    {
        return $this->container['force_autoplay'];
    }

    /**
     * Sets force_autoplay
     *
     * @param bool|null $force_autoplay enable/disable player autoplay. Default: false
     *
     * @return self
     */
    public function setForceAutoplay($force_autoplay)
    {
        $this->container['force_autoplay'] = $force_autoplay;

        return $this;
    }

    /**
     * Gets hide_title
     *
     * @return bool|null
     */
    public function getHideTitle()
    {
        return $this->container['hide_title'];
    }

    /**
     * Sets hide_title
     *
     * @param bool|null $hide_title enable/disable title. Default: false
     *
     * @return self
     */
    public function setHideTitle($hide_title)
    {
        $this->container['hide_title'] = $hide_title;

        return $this;
    }

    /**
     * Gets force_loop
     *
     * @return bool|null
     */
    public function getForceLoop()
    {
        return $this->container['force_loop'];
    }

    /**
     * Sets force_loop
     *
     * @param bool|null $force_loop enable/disable looping. Default: false
     *
     * @return self
     */
    public function setForceLoop($force_loop)
    {
        $this->container['force_loop'] = $force_loop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


